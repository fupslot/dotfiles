# This prompt inspired by gf3, sindresorhus, alrra, and mathiasbynens.
# but customized to me. <3

default_username='eugenebrodsky'


if [[ -n "$ZSH_VERSION" ]]; then  # quit now if in zsh
    return 1 2> /dev/null || exit 1;
fi;


if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
fi


set_prompts() {

    local black="" blue="" bold="" cyan="" green="" orange="" \
          purple="" red="" reset="" white="" yellow="" lightgray="" \
          darkgray="" lightred="" lightgreen="" lightblue="" lightpurple="" \
          lightcyan="" lightyellow=""

    bold=""
    reset="\033[0m"

    black="\033[0;30m"
    red="\033[1;31m"
    green="\033[0;32m"
    orange="\033[1;33m"
    blue="\033[1;34m"
    purple="\033[1;35m"
    cyan="\033[1;36m"
    lightgray="\033[1;37m"
    yellow="\033[0;33m"

    darkgray="\033[0;30m"
    lightred="\033[0;31m"
    lightgreen="\033[1;32m"
    lightblue="\033[0;34m"
    lightyellow="\033[1;33m"
    lightpurple="\033[0;35m"
    lightcyan="\033[0;36m"
    white="\033[0;37m"

    # Only show username/host if not default
    function usernamehost() {

        # Highlight the user name when logged in as root.
        if [[ "${USER}" == *"root" ]]; then
            userStyle="${red}";
        else
            userStyle="${magenta}";
        fi;

        userhost=""
        userhost+="\[${userStyle}\]$USER "
        userhost+="${white}at "
        userhost+="${orange}$HOSTNAME "
        userhost+="${white}in"

        if [ $USER != "$default_username" ]; then echo $userhost ""; fi
    }


    function prompt_git() {
        local s=""

        # check if we're in a git repo. (fast)
        git rev-parse --is-inside-work-tree &>/dev/null || return

        # check if the current directory is in .git before running git checks
    		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

    			# Ensure the index is up to date.
    			git update-index --really-refresh -q &>/dev/null;

    			# Check for uncommitted changes in the index.
    			if ! $(git diff --quiet --ignore-submodules --cached); then
    				s+=" ${1}${7}[+]${1}";
    			fi;

    			# Check for unstaged changes.
    			if ! $(git diff-files --quiet --ignore-submodules --); then
    				s+=" ${1}${4}[*]${1}";
    			fi;

    			# Check for untracked files.
    			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
    				s+=" ${1}${5}[?]${1}";
    			fi;

    			# Check for stashed files.
    			if $(git rev-parse --verify refs/stash &>/dev/null); then
    				s+=" ${1}${6}[¿]${1}";
    			fi;

    		fi;

        # check for what branch we're on. (fast)
        #   if… HEAD isn’t a symbolic ref (typical branch),
        #   then… get a tracking remote branch or tag
        #   otherwise… get the short SHA for the latest commit
        #   lastly just give up.
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
            git describe --all --exact-match HEAD 2> /dev/null || \
            git rev-parse --short HEAD 2> /dev/null || \
            echo '(unknown)')";

        # [ -n "${s}" ] && s="${s}";
        echo -e "${2}${3}${branchName}${1}${s}";

        return
    }



    # ------------------------------------------------------------------
    # | Prompt string                                                  |
    # ------------------------------------------------------------------

    PS1="\[\033]0;\w\007\]"                                 # terminal title (set to the current working directory)
    PS1+="\n\[$bold\]"
    PS1+="\[$(usernamehost)\]"                              # username at host
    PS1+="\[$yellow\]\w"                                     # working directory
    PS1+="\$(prompt_git \"$reset\" \"$white on \" \"$cyan\" \"$green\" \"$lightyellow\" \"$purple\", \"$yellow\")" # git repository details
    PS1+="\n"
    PS1+="\[$reset$lightgreen\]§» \[$reset\]"

    export PS1

    PS2="\[${red}\]§ \[${reset}\]";
    export PS2;
}



set_prompts
unset set_prompts
